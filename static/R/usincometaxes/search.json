[{"path":"https://shanejorr.github.io/usincometaxes/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Shane Orr Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/articles/taxsim-input.html","id":"required-columns","dir":"Articles","previous_headings":"","what":"Required columns","title":"Description of Input Columns","text":"taxsimid TAXSIM 35 year TAXSIM 35 “single” single; “married, jointly” married, filing jointly; “married, separately” married, filing separately; “dependent child” dependent, usually child income; mstat TAXSIM 35","code":""},{"path":"https://shanejorr.github.io/usincometaxes/articles/taxsim-input.html","id":"optional-columns","dir":"Articles","previous_headings":"","what":"Optional columns","title":"Description of Input Columns","text":"state TAXSIM 35 page TAXSIM 35 sage TAXSIM 35 depx TAXSIM 32 dep13 TAXSIM 32 dep17 TAXSIM 32 dep18 TAXSIM 32 num_dependents_ columns mutually exclusive. example, family 13 year old can report dependent num_dependents_thirteen also num_dependents_seventeen. pwages TAXSIM 35 swages TAXSIM 35 dividends TAXSIM 35 intrec TAXSIM 35 stcg TAXSIM 35 ltcg TAXSIM 35 Unearned limited partnership passive S-Corp profits; Rent eligible QBI deduction; Non-qualified dividends; Capital gains distributions form 1040; otherprop TAXSIM 35 Alimony; Nonwage fellowships; State income tax refunds (itemizers ); Alimony paid; Keogh IRA contributions; Foreign income exclusion; nonprop TAXSIM 35 pensions TAXSIM 35 ggsi TAXSIM 35 pensions TAXSIM 35 Welfare; Workers comp; Veterans benefits; transfers TAXSIM 35 rentpaid TAXSIM 35 proptax TAXSIM 35 state local taxes (line 8 Schedule ) plus local income tax; Preference share medical expenses; otheritem TAXSIM 35 childcare TAXSIM 35 Deductible medical expenses included Line 16; Motor Vehicle Taxes paid; Home mortgage interest; Charitable contributions; mortgage TAXSIM 35 scorp TAXSIM 35 pbusinc TAXSIM 35 pprofinc TAXSIM 35 sbusinc TAXSIM 35 sprofinc TAXSIM 35","code":""},{"path":"https://shanejorr.github.io/usincometaxes/articles/taxsim-output.html","id":"standard-columns","dir":"Articles","previous_headings":"","what":"Standard columns","title":"Description of Output Columns","text":"Returned columns return_all_information = FALSE. id_number: ID number input data set, users can match tax information input data set. federal_taxes: Federal income tax liability including capital gains rates, surtaxes, AMT refundable non-refundable credits. state_taxes: State income tax liability. fica_taxes: Total FICA taxes, including employers employees share. federal_marginal_rate: Marginal federal tax rate. state_marginal_rate: Marginal state tax rate, state identified. fica_rate: FICA rate.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/articles/taxsim-output.html","id":"detailed-columns","dir":"Articles","previous_headings":"","what":"Detailed columns","title":"Description of Output Columns","text":"Returned columns return_all_information = TRUE. standard columns. federal_agi: Federal AGI ui_agi: UI AGI soc_sec_agi: Social Security AGI zero_bracket_amount: Zero Bracket Amount personal_exemptions: Personal Exemptions exemption_phaseout: Exemption Phaseout deduction_phaseout: Deduction Phaseout itemized_deductions: Itemized Deductions Allowed (Zero non-itemizers) federal_taxable_income: Federal Taxable Income tax_on_taxable_income: Tax Taxable Income (special capital gains rates) exemption_surtax: Exemption Surtax general_tax_credit: General Tax Credit child_tax_credit_adjusted: Child Tax Credit (adjusted) child_tax_credit_refundable: Additional Child Tax Credit (refundable) child_care_credit: Child Care Credit eitc: Earned Income Credit (total federal) amt_income: Income Alternative Minimum Tax amt_liability: AMT Liability credit regular tax allowed credits. fed_income_tax_before_credit:Federal Income Tax Credits (includes special treatment Capital gains, exemption surtax (1988-1996) 15% rate phaseout (1988-1990) AMT) fica: FICA medicare_tax_unearned_income: Medicare Tax Unearned Income medicare_tax_earned_income: Medicare Tax Earned Income cares_recovery_rebate: CARES act Recovery Rebates following columns zero state specified: state_household_income: State Household Income (imputation property tax credit) state_rent_expense: State Rent Expense (imputation property tax credit) state_agi: State AGI state_exemption_amount: State Exemption amount state_std_deduction_amount: State Standard Deduction state_itemized_deducation: State Itemized Deductions state_taxable_income: State Taxable Income state_property_tax_credit: State Property Tax Credit state_child_care_credit: State Child Care Credit state_eitc: State EIC state_total_credits: State Total Credits state_bracket_rate: State Bracket Rate self_emp_income: Earned Self-Employment Income FICA","code":""},{"path":"https://shanejorr.github.io/usincometaxes/articles/taxsim-output.html","id":"mapping-usincometaxes-columns-to-taxsim-32-columns","dir":"Articles","previous_headings":"","what":"Mapping usincometaxes columns to TAXSIM 32 columns","title":"Description of Output Columns","text":"Results usincometaxes include output TAXSIM 32. table maps usincometaxes output column names TAXSIM 32 output column names.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/articles/using-usincometaxes.html","id":"calculating-income-taxes-from-survey-data","dir":"Articles","previous_headings":"","what":"Calculating income taxes from survey data","title":"Calculating Federal and State Income Taxes","text":"first example use internal data set called taxpayer_finances. data randomly generated formatted use usincometaxes. Guidance formatting data can found Description Input Columns article. data set contains financial household characteristics help estimate income taxes. row data set tax paying unit. Thus, row files one tax return. Columns represent items reported tax returns impact taxes. course, information data set represent everything people report tax returns. reason, income tax calculations simply estimates. call taxsim_calculate_taxes() estimate federal state income taxes tax paying unit. taxsim_calculate_taxes() sends data NBER’s TAXSIM 32 program calculation returns results data frame. interested federal state tax liabilities, line item credits deduction, using return_all_information = FALSE. id_number column required input data frame used taxsim_calculate_taxes. column also returned output data frame containing tax calculations, allowing us link input output data frames. Now single data frame containing wages income tax liabilities. Let’s take look relationship wages estimated federal income taxes. colors represent number children 18 younger.  plots shows expect: higher income families pay taxes households pay less children . also see reduction federal marginal tax rates 2000 2020, shown decrease income tax liabilities comparing two years.","code":"data(taxpayer_finances)  taxpayer_finances %>%   head() %>%   kable() family_taxes <- taxsim_calculate_taxes(   .data = taxpayer_finances,   return_all_information = FALSE ) family_taxes %>%   head() %>%   kable() income_and_taxes <- taxpayer_finances %>%   left_join(family_taxes, by = 'id_number')  income_and_taxes %>%   head() %>%   kable() # custom theme for all plots in the vignette plt_theme <- function() {        theme_minimal() +     theme(       legend.text = element_text(size = 11),       axis.text = element_text(size = 10),       axis.title=element_text(size=11,face=\"bold\"),       strip.text = element_text(size = 11),       panel.grid.minor = element_blank(),       plot.title = element_text(face = \"bold\"),       plot.subtitle = element_text(size = 12),       legend.position = 'bottom'     ) } # color palettes for number of children dep_color_palette <- rev(c('#4B0055','#353E7C','#007094','#009B95','#00BE7D','#96D84B')) income_and_taxes %>%   mutate(     tax_unit_income = primary_wages + spouse_wages,     num_dependents_eitc = factor(num_dependents_eitc, levels = as.character(0:5)),     filing_status = tools::toTitleCase(filing_status)   ) %>%   ggplot(aes(tax_unit_income, federal_taxes, color = num_dependents_eitc)) +     geom_point(alpha = .5) +     scale_x_continuous(labels = scales::label_dollar(scale = .001, suffix = \"K\"), limits = c(0, 200000)) +     scale_y_continuous(labels = scales::label_dollar(scale = .001, suffix = \"K\"), limits = c(-10000, 50000)) +     scale_color_discrete(type = dep_color_palette) +     facet_grid(rows = vars(filing_status), cols = vars(tax_year)) +     labs(       title = \"Federal Income Taxes by Filing Status, Year, and Number of Children\",       x = \"\\nHousehold Wages\",       y = \"Federal Income Taxes\"     ) +     plt_theme() +     guides(color = guide_legend(title = \"Number of Childern 18 or Younger\", title.position = \"top\", byrow = TRUE)) #> Warning: Removed 159 rows containing missing values (geom_point)."},{"path":[]},{"path":"https://shanejorr.github.io/usincometaxes/articles/using-usincometaxes.html","id":"association-between-income-taxes-paid-and-household-wages","dir":"Articles","previous_headings":"Income tax simulations","what":"Association between income taxes paid and household wages","title":"Calculating Federal and State Income Taxes","text":"additional use usincometaxes run simulations. simple plotting relationship wages income taxes paid. , first need create data set holds everything constant except wages. code block , except also creates different data sets households zero four children 18 younger, can compare differences characteristic well. Now, calculate federal state income taxes simulated data set. Note return_all_information = TRUE. allows us examine credit amounts like Child Tax Credit Earned Income Tax Credit (EITC). , let’s merge tax data original input data set. Now, let’s look relationship household wages estimated income tax liabilities.  Note North Carolina flat tax 5.25% 2020. ’s taxes increase linearly.","code":"# calculate taxes from 0 to 200,000 in wages wage_linespace <- seq(0, 200000, 100) n_kids <- 4 base_family_income <- data.frame(   tax_year = 2020,   filing_status = 'married, jointly',   state = 'NC',   primary_age = 40,   spouse_age = 40,   num_dependents = n_kids,   num_dependents_thirteen = n_kids,   num_dependents_seventeen = n_kids,   num_dependents_eitc = n_kids,   primary_wages = wage_linespace,   spouse_wages = 0 ) # create an additional data se twith no dependents and add it to the original family_income <- base_family_income %>%   bind_rows(     # make all numeber of dependent columns 0     base_family_income %>%       mutate(across(starts_with('num'), ~0))   ) %>%   # add unique ID to each row   mutate(id_number = row_number()) %>%   select(id_number, everything())  family_income %>%   head() %>%   kable() family_income_taxes <- taxsim_calculate_taxes(   .data = family_income,   return_all_information = TRUE )  family_income_taxes %>%   head() %>%   kable() family_income <- family_income %>%   left_join(family_income_taxes, by = 'id_number') family_income_long <- family_income %>%   select(primary_wages, num_dependents_eitc, federal_taxes, state_taxes) %>%   pivot_longer(cols = c('federal_taxes', 'state_taxes'),                 names_to = 'jurisdiction', values_to = 'taxes_paid') %>%   mutate(     jurisdiction = recode(jurisdiction, 'federal_taxes' = 'Federal Income Taxes', 'state_taxes' = 'NC State Income Taxes'),     num_dependents_eitc = factor(num_dependents_eitc, levels = as.character(0:5)),     post_tax_wages = primary_wages - taxes_paid   ) # primary_wages, taxes_paid, color = as.character(num_dependents_eitc) taxes_line_plot <- function(.data, x_var, y_var, color_var) {   ggplot(.data, aes({{x_var}}, {{y_var}}, color = {{color_var}})) +     geom_line(size = 1, alpha = .8) +     geom_hline(yintercept = 0) +     scale_x_continuous(labels = scales::label_dollar(scale = .001, suffix = \"K\")) +     scale_y_continuous(labels = scales::label_dollar(scale = .001, suffix = \"K\")) +     scale_color_brewer(type = 'seq', palette = 'Set2')  +     plt_theme()    } taxes_line_plot(family_income_long, primary_wages, taxes_paid, num_dependents_eitc) +   facet_wrap(vars(jurisdiction)) +   labs(     title = \"Relationship Between Wages and Income Taxes Paid\",     subtitle = \"Taxpayer is married, filing jointly, in 2020\",     x = \"\\nPre-Tax Household Wages\",     y = \"Federal Income Taxes\",     color = 'Number of Children 18 or Younger:'   )"},{"path":"https://shanejorr.github.io/usincometaxes/articles/using-usincometaxes.html","id":"relationship-between-pre-and-post-tax-wages","dir":"Articles","previous_headings":"Income tax simulations","what":"Relationship Between Pre and Post-Tax Wages","title":"Calculating Federal and State Income Taxes","text":"’ll create additional plot comparing pre-tax post-tax household wages.","code":"taxes_line_plot(family_income_long, primary_wages, post_tax_wages, num_dependents_eitc) +   facet_wrap(vars(jurisdiction)) +   labs(     title = \"Relationship Between Pre and Post-Tax Wages\",     subtitle = \"Taxpayer is married, filing jointly, in 2020\",     x = \"\\nPre-Tax Household Wages\",     y = \"Post-Tax Hosuehold Wages\",     color = 'Number of Children 18 or Younger:'   )"},{"path":"https://shanejorr.github.io/usincometaxes/articles/using-usincometaxes.html","id":"child-tax-credit-and-earned-income-tax-credit-eitc","dir":"Articles","previous_headings":"Income tax simulations","what":"Child Tax Credit and Earned Income Tax Credit (EITC)","title":"Calculating Federal and State Income Taxes","text":"noted previously, setting return_all_information = TRUE lets us retrieve additional output. Included additional output amounts Child Tax Credit EITC. Let’s look amounts credits, varying household wages. values reflect household four children 18 younger.","code":"tax_items_mapping <- c(   eitc = 'Earned Income Tax Credit',   child_tax_credit = 'Child Tax Credit' ) family_income %>%   filter(num_dependents_eitc == 4) %>%   mutate(child_tax_credit = child_tax_credit_adjusted + child_tax_credit_refundable) %>%   select(primary_wages, federal_taxes, eitc, child_tax_credit) %>%   pivot_longer(cols = names(tax_items_mapping), names_to = 'tax_item', values_to = 'amount') %>%   mutate(tax_item = recode(tax_item, !!!tax_items_mapping)) %>%   taxes_line_plot(primary_wages, amount, tax_item) +   labs(     title = \"Relationship Between Wages and Credits\",     subtitle = \"Taxpayer is married, filing jointly, in 2020 and has four children under 19\",     x = \"\\nPre-Tax Wages\",     y = \"Credit Amount\",     color = NULL   )"},{"path":"https://shanejorr.github.io/usincometaxes/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shane Orr. Author, maintainer.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Orr S (2022). usincometaxes: Calculate Federal State Income Taxes United States. https://github.com/shanejorr/usincometaxes, https://shaneorr.io/r/usincometaxes.","code":"@Manual{,   title = {usincometaxes: Calculate Federal and State Income Taxes in the United States},   author = {Shane Orr},   year = {2022},   note = {https://github.com/shanejorr/usincometaxes, https://shaneorr.io/r/usincometaxes}, }"},{"path":"https://shanejorr.github.io/usincometaxes/index.html","id":"calculate-federal-and-state-income-taxes","dir":"","previous_headings":"","what":"Calculate Federal and State Income Taxes","title":"Calculate Federal and State Income Taxes in the United States","text":"usincometaxes R package calculates federal state income taxes United States. relies National Bureau Economic Research’s (NBER) TAXSIM 32 tax simulator calculations. package takes care behind--scenes work getting data proper format, converting proper file type uploading NBER server, uploading data, downloading results, placing results tidy data frame. NOTE: package associated NBER. private creation uses wonderful tax calculator.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Calculate Federal and State Income Taxes in the United States","text":"can install usincometaxes GitHub :","code":"devtools::install_github(\"shanejorr/usincometaxes\")"},{"path":"https://shanejorr.github.io/usincometaxes/index.html","id":"quick-example","dir":"","previous_headings":"","what":"Quick example","title":"Calculate Federal and State Income Taxes in the United States","text":"usincometaxes helps users estimate household income taxes data sets containing financial household data. allows users estimate income taxes surveys financial information, United States Census Public Use Micro Data (PUMS). usincometaxes contains one function: taxsim_calculate_taxes(). simple example use. Users can use id_number column join tax data original data set. Every id_number input data represented output tax data.","code":"library(dplyr) library(knitr) library(usincometaxes)  family_income <- data.frame(   id_number = c(1, 2),   state = c('North Carolina', 'NY'),   tax_year = c(2015, 2020),   filing_status = c('single', 'married, jointly'),   primary_wages = c(50000, 100000),   primary_age = c(26, 36) )  family_taxes <- taxsim_calculate_taxes(   .data = family_income,   marginal_tax_rates = 'Wages',   return_all_information = FALSE ) kable(family_taxes) family_income %>%   left_join(family_taxes, by = 'id_number') %>%   kable()"},{"path":"https://shanejorr.github.io/usincometaxes/index.html","id":"output","dir":"","previous_headings":"","what":"Output","title":"Calculate Federal and State Income Taxes in the United States","text":"taxsim_calculate_taxes() returns data frame row corresponds row .data column piece tax information. output .data can linked id_number column. amount output (tax information) received controlled return_all_information parameter taxsim_calculate_taxes(). Setting return_all_information FALSE returns minimal information federal state tax liabilities FICA taxes. return_all_information TRUE 45 different tax items returned. See Description Output Columns vignette output information.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/index.html","id":"input","dir":"","previous_headings":"","what":"Input","title":"Calculate Federal and State Income Taxes in the United States","text":"Taxes calculated taxsim_calculate_taxes() using financial household characteristics found data frame represented .data parameter. column different piece information row contains tax payer unit. columns must column names data types listed Description Input Columns vignette. .data can contain columns beyond listed vignette. additional columns ignored.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/index.html","id":"marginal-tax-rates","dir":"","previous_headings":"","what":"Marginal tax rates","title":"Calculate Federal and State Income Taxes in the United States","text":"default, marginal tax rates calculated using wages. default can changed return_all_information parameter taxsim_calculate_taxes(). Possible options : ‘Wages’ (default), ‘Long Term Capital Gains’, ‘Primary Wage Earner’, ‘Secondary Wage Earner’. Go Marginal Tax Rates section TAXSIM 32 documentation information.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/index.html","id":"giving-credit","dir":"","previous_headings":"","what":"Giving credit","title":"Calculate Federal and State Income Taxes in the United States","text":"NBER’s TAXSIM 32 tax simulator tax calculations. package simply lets users interact tax simulator R. Therefore, users cite TAXSIM 35 tax simulator use package work:           Feenberg, Daniel Richard, Elizabeth Coutts, Introduction TAXSIM Model, Journal Policy Analysis Management vol 12 1, Winter 1993, pages 189-194.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/check_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure input data set has required fields and datatypes are correct — check_data","title":"Ensure input data set has required fields and datatypes are correct — check_data","text":"Check ensure required column present data types correct. function binds checks helper functions.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/check_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure input data set has required fields and datatypes are correct — check_data","text":"","code":"check_data(.data, cols, state_column_name)"},{"path":"https://shanejorr.github.io/usincometaxes/reference/check_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure input data set has required fields and datatypes are correct — check_data","text":".data data frame containing input parameters TAXSIM 32 program. column names input parameters . column can order. cols column names, string, data set .data state_column_name column name state column.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/check_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure input data set has required fields and datatypes are correct — check_data","text":"function return value. either produces stop message error prints checks successful.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/check_greater_zero.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that columns are greater than zero — check_greater_zero","title":"Check that columns are greater than zero — check_greater_zero","text":"columns must values greater zero. Check make sure true.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/check_greater_zero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that columns are greater than zero — check_greater_zero","text":"","code":"check_greater_zero(.data, cols)"},{"path":"https://shanejorr.github.io/usincometaxes/reference/check_greater_zero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that columns are greater than zero — check_greater_zero","text":".data data frame containing input parameters TAXSIM 32 program. column names input parameters . column can order. cols column names, string, data set .data.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/check_id_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that the id_number column is an integer and every value is unique. — check_id_number","title":"Check that the id_number column is an integer and every value is unique. — check_id_number","text":"id_number column requires whole number unique value. Check make sure true.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/check_id_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that the id_number column is an integer and every value is unique. — check_id_number","text":"","code":"check_id_number(id_number_col)"},{"path":"https://shanejorr.github.io/usincometaxes/reference/check_id_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that the id_number column is an integer and every value is unique. — check_id_number","text":"id_number_col Vector id id_number column. always column id_number input data frame.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/check_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Check numeric columns — check_numeric","title":"Check numeric columns — check_numeric","text":"Checks column numeric integer numeric integer.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/check_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check numeric columns — check_numeric","text":"","code":"check_numeric(.data, cols)"},{"path":"https://shanejorr.github.io/usincometaxes/reference/check_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check numeric columns — check_numeric","text":".data data frame containing input parameters TAXSIM 32 program. column names input parameters . column can order. cols column names, string, data set .data.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/check_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Check input parameters — check_parameters","title":"Check input parameters — check_parameters","text":"Check input parameters taxsim_calculate_taxes proper type paramters function taxsim_calcualte_taxes","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/check_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check input parameters — check_parameters","text":"","code":"check_parameters(.data, all_columns)"},{"path":"https://shanejorr.github.io/usincometaxes/reference/check_required_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure the required columns are present — check_required_cols","title":"Ensure the required columns are present — check_required_cols","text":"Ensure required columns present","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/check_required_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure the required columns are present — check_required_cols","text":"","code":"check_required_cols(cols)"},{"path":"https://shanejorr.github.io/usincometaxes/reference/check_required_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure the required columns are present — check_required_cols","text":"cols column names, string, data set .data","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/check_spouse.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure single taxpayers do not have spouse ages or income — check_spouse","title":"Ensure single taxpayers do not have spouse ages or income — check_spouse","text":"Ensure single taxpayers spouse ages income","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/check_spouse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure single taxpayers do not have spouse ages or income — check_spouse","text":"","code":"check_spouse(.data, cols)"},{"path":"https://shanejorr.github.io/usincometaxes/reference/check_spouse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure single taxpayers do not have spouse ages or income — check_spouse","text":".data data frame containing input parameters TAXSIM 32 program. column names input parameters . column can order. cols column names, string, data set .data.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/check_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Check state column — check_state","title":"Check state column — check_state","text":"State either two letter abbreviation full state name. Check make sure true.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/check_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check state column — check_state","text":"","code":"check_state(.data, cols, state_column_name)"},{"path":"https://shanejorr.github.io/usincometaxes/reference/check_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check state column — check_state","text":".data data frame containing input parameters TAXSIM 32 program. column names input parameters . column can order. cols column names, string, data set .data. state_column_name column name state column.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/clean_from_taxsim.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean final TAXSIM data set. — clean_from_taxsim","title":"Clean final TAXSIM data set. — clean_from_taxsim","text":"Clean data set received TAXSIM renaming columns removing columns needed final output.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/clean_from_taxsim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean final TAXSIM data set. — clean_from_taxsim","text":"","code":"clean_from_taxsim(from_taxsim)"},{"path":"https://shanejorr.github.io/usincometaxes/reference/clean_from_taxsim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean final TAXSIM data set. — clean_from_taxsim","text":"from_taxsim data set received TAXSIM.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/clean_from_taxsim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean final TAXSIM data set. — clean_from_taxsim","text":"Data frame containing row's id_number tax calculations. data frame can merged original input data frame id_number.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/connect_server_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload and download data from all ports — connect_server_all","title":"Upload and download data from all ports — connect_server_all","text":"Tries upload download data TAXSIM server using three different ports. use first port successful ports tried.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/connect_server_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload and download data from all ports — connect_server_all","text":"","code":"connect_server_all(to_taxsim_tmp_filename, from_taxsim_tmp_filename)"},{"path":"https://shanejorr.github.io/usincometaxes/reference/connect_server_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload and download data from all ports — connect_server_all","text":"to_taxsim_tmp_filename Full file path name temp file containing data upload TAXSIM. from_taxsim_tmp_filename Full file path name temp file contain downloaded data.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/connect_server_all_ssh.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload and download data from all ports — connect_server_all_ssh","title":"Upload and download data from all ports — connect_server_all_ssh","text":"Tries upload download data TAXSIM server using three different ports. use first port successful ports tried.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/connect_server_all_ssh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload and download data from all ports — connect_server_all_ssh","text":"","code":"connect_server_all_ssh(to_taxsim_tmp_filename, from_taxsim_tmp_filename)"},{"path":"https://shanejorr.github.io/usincometaxes/reference/connect_server_all_ssh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload and download data from all ports — connect_server_all_ssh","text":"to_taxsim_tmp_filename Full file path name temp file containing data upload TAXSIM. from_taxsim_tmp_filename Full file path name temp file contain downloaded data.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/connect_server_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload and download data — connect_server_single","title":"Upload and download data — connect_server_single","text":"Uploads data TAXSIM server via SSH downloads data taxes. uploads downloads csv files saved temp directories.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/connect_server_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload and download data — connect_server_single","text":"","code":"connect_server_single(to_taxsim_tmp_filename, from_taxsim_tmp_filename, port)"},{"path":"https://shanejorr.github.io/usincometaxes/reference/connect_server_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload and download data — connect_server_single","text":"to_taxsim_tmp_filename Full file path name temp file containing data upload TAXSIM. from_taxsim_tmp_filename Full file path name temp file contain downloaded data. port String. port use connecting TAXAIM server","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/connect_server_single_ssh.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload and download data — connect_server_single_ssh","title":"Upload and download data — connect_server_single_ssh","text":"Uploads data TAXSIM server via SSH downloads data taxes. uploads downloads csv files saved temp directories.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/connect_server_single_ssh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload and download data — connect_server_single_ssh","text":"","code":"connect_server_single_ssh(   to_taxsim_tmp_filename,   from_taxsim_tmp_filename,   port )"},{"path":"https://shanejorr.github.io/usincometaxes/reference/connect_server_single_ssh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload and download data — connect_server_single_ssh","text":"to_taxsim_tmp_filename Full file path name temp file containing data upload TAXSIM. from_taxsim_tmp_filename Full file path name temp file contain downloaded data. port String. port use connecting TAXAIM server","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/convert_marginal_tax_rates.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode marginal tax rates. — convert_marginal_tax_rates","title":"Recode marginal tax rates. — convert_marginal_tax_rates","text":"Marginal tax rates specified marginal_tax_rates parameter. possible values descriptive strings. ,TAXSIM requires integers. Convert descriptice strings integers.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/convert_marginal_tax_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode marginal tax rates. — convert_marginal_tax_rates","text":"","code":"convert_marginal_tax_rates(marginal_tax_rate_specification)"},{"path":"https://shanejorr.github.io/usincometaxes/reference/convert_marginal_tax_rates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode marginal tax rates. — convert_marginal_tax_rates","text":"marginal_tax_rate String representing marginal_tax_rate parameter taxsim_calculate_taxes","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/create_dataset_for_taxsim.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a data frame to the TAXSIM 35 output. — create_dataset_for_taxsim","title":"Convert a data frame to the TAXSIM 35 output. — create_dataset_for_taxsim","text":"function takes data set format required taxsim_calculate_taxes, checks make sure proper format TAXSIM 35, cleans can sent TAXSIM 35. function useful troubleshooting. needed calculate taxes. function useful continue receiving unreasonable errors taxsim_calculate_taxes. case, can run function data frame used taxsim_calculate_taxes. save data frame csv file. , upload file TAXSIM 35. errors TAXSIM 35 issue lies taxsim_calculate_taxes.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/create_dataset_for_taxsim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a data frame to the TAXSIM 35 output. — create_dataset_for_taxsim","text":"","code":"create_dataset_for_taxsim(.data)"},{"path":"https://shanejorr.github.io/usincometaxes/reference/create_dataset_for_taxsim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a data frame to the TAXSIM 35 output. — create_dataset_for_taxsim","text":".data Data frame containing information used calculate taxes. data set sent TAXSIM. Data frame must specified column names data types.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/create_dataset_for_taxsim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a data frame to the TAXSIM 35 output. — create_dataset_for_taxsim","text":"data frame can manually uploaded TAXSIM 35.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/create_dataset_for_taxsim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a data frame to the TAXSIM 35 output. — create_dataset_for_taxsim","text":"","code":"family_income <- data.frame(     id_number = c(1, 2),      state = c('North Carolina', 'NY'),      tax_year = c(2015, 2015),      filing_status = c('single', 'married, jointly'),      primary_wages = c(10000, 100000),      primary_age = c(26, 36) )  family_taxes <- create_dataset_for_taxsim(family_income) #> All required columns are present and the data is in the proper format!  if (FALSE) { # write out the data frame as a csv file for uploading to TAXSIM 35 vroom::vroom_write(family_taxes, delim = \",\") }"},{"path":"https://shanejorr.github.io/usincometaxes/reference/create_ssh_command.html","id":null,"dir":"Reference","previous_headings":"","what":"Create SSH command — create_ssh_command","title":"Create SSH command — create_ssh_command","text":"Create SSH command","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/create_ssh_command.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create SSH command — create_ssh_command","text":"","code":"create_ssh_command(to_taxsim_tmp_filename, from_taxsim_tmp_filename, port)"},{"path":"https://shanejorr.github.io/usincometaxes/reference/create_ssh_command.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create SSH command — create_ssh_command","text":"to_taxsim_tmp_filename Full file path name temp file containing data upload TAXSIM. from_taxsim_tmp_filename Full file path name temp file contain downloaded data. port String. port use connecting TAXAIM server","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/create_ssh_command.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create SSH command — create_ssh_command","text":"Returns string represents ssh command.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/from_taxsim_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Map output column names. — from_taxsim_cols","title":"Map output column names. — from_taxsim_cols","text":"Map output column names required package input column names required TAXSIM.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/from_taxsim_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map output column names. — from_taxsim_cols","text":"","code":"from_taxsim_cols()"},{"path":"https://shanejorr.github.io/usincometaxes/reference/get_state_soi.html","id":null,"dir":"Reference","previous_headings":"","what":"Get state SOI from name. — get_state_soi","title":"Get state SOI from name. — get_state_soi","text":"Return integer number state SOI state based either two letter abbreviation full name.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/get_state_soi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get state SOI from name. — get_state_soi","text":"","code":"get_state_soi(state_column)"},{"path":"https://shanejorr.github.io/usincometaxes/reference/get_state_soi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get state SOI from name. — get_state_soi","text":"state_column Vectors containing states calculate taxes . Generally, state column data set sent TAXSIM.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/get_state_soi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get state SOI from name. — get_state_soi","text":"Named integer vector number 1 51 representing state's SOI. Names state's two letter abbreviation.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/import_data_ftp.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload and import TAXSIM results via ftp — import_data_ftp","title":"Upload and import TAXSIM results via ftp — import_data_ftp","text":"Upload import TAXSIM results via ftp","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/import_data_ftp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload and import TAXSIM results via ftp — import_data_ftp","text":"","code":"import_data_ftp(to_taxsim_tmp_filename, idtl)"},{"path":"https://shanejorr.github.io/usincometaxes/reference/import_data_ftp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload and import TAXSIM results via ftp — import_data_ftp","text":"to_taxsim_tmp_filename Full file path name temp file containing data upload TAXSIM.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/import_data_ftp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upload and import TAXSIM results via ftp — import_data_ftp","text":"Dataframe TAXSIM results.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/import_data_helper.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data helper — import_data_helper","title":"Import data helper — import_data_helper","text":"returning columns, data retrieved TAXSIM contains extra column. function trims extra column returning information.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/import_data_helper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data helper — import_data_helper","text":"","code":"import_data_helper(raw_data, idtl)"},{"path":"https://shanejorr.github.io/usincometaxes/reference/import_data_helper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data helper — import_data_helper","text":"raw_data raw data TAXSIM thatwe want load R.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/import_data_ssh.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data via ssh — import_data_ssh","title":"Import data via ssh — import_data_ssh","text":"function wraps ssh functions upload, download, import TAXSIM results. function need sto ran import data via ssh","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/import_data_ssh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data via ssh — import_data_ssh","text":"","code":"import_data_ssh(to_taxsim_tmp_filename, from_taxsim_tmp_filename, idtl)"},{"path":"https://shanejorr.github.io/usincometaxes/reference/import_data_ssh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data via ssh — import_data_ssh","text":"to_taxsim_tmp_filename Full file path name temp file containing data upload TAXSIM. from_taxsim_tmp_filename Full file path name temp file contain downloaded data.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/recode_filing_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode filing status. — recode_filing_status","title":"Recode filing status. — recode_filing_status","text":"Check make sure strings filing_status correct recode string integer.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/recode_filing_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode filing status. — recode_filing_status","text":"","code":"recode_filing_status(filing_status_colname)"},{"path":"https://shanejorr.github.io/usincometaxes/reference/recode_filing_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode filing status. — recode_filing_status","text":"filing_status_colname Column, vector, containing filing status","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/recode_filing_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode filing status. — recode_filing_status","text":"Vector integers reflecting numeric value filing status.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/taxpayer_finances.html","id":null,"dir":"Reference","previous_headings":"","what":"Financial and household characteristics of 1,000 taxpayer units. — taxpayer_finances","title":"Financial and household characteristics of 1,000 taxpayer units. — taxpayer_finances","text":"data set containing financial household characteristics 1,000 taxpayer units. data set randomly generated reflect real data. formatted ready use usincometaxes package.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/taxpayer_finances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Financial and household characteristics of 1,000 taxpayer units. — taxpayer_finances","text":"","code":"taxpayer_finances"},{"path":"https://shanejorr.github.io/usincometaxes/reference/taxpayer_finances.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Financial and household characteristics of 1,000 taxpayer units. — taxpayer_finances","text":"data frame 1,000 rows 16 variables. Variable definitions can found following article: https://www.shaneorr.io/r/usincometaxes/articles/taxsim-input.html","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/taxpayer_finances.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Financial and household characteristics of 1,000 taxpayer units. — taxpayer_finances","text":"Created random data generation.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/taxsim_calculate_taxes.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate state and federal taxes using TAXSIM 32. — taxsim_calculate_taxes","title":"Calculate state and federal taxes using TAXSIM 32. — taxsim_calculate_taxes","text":"function calculates state federal income taxes using TAXSIM 35 tax simulator. See http://taxsim.nber.org/taxsim35/ information TAXSIM 35.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/taxsim_calculate_taxes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate state and federal taxes using TAXSIM 32. — taxsim_calculate_taxes","text":"","code":"taxsim_calculate_taxes(   .data,   marginal_tax_rates = \"Wages\",   return_all_information = FALSE )"},{"path":"https://shanejorr.github.io/usincometaxes/reference/taxsim_calculate_taxes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate state and federal taxes using TAXSIM 32. — taxsim_calculate_taxes","text":".data Data frame containing information used calculate taxes. data set sent TAXSIM. Data frame must specified column names data types. marginal_tax_rates Variable use calculating marginal tax rates. One 'Wages', 'Long Term Capital Gains', 'Primary Wage Earner', 'Secondary Wage Earner'. Default 'Wages'. return_all_information Boolean (TRUE FALSE). Whether return information TAXSIM (TRUE), key information (FALSE). Returning information returns 42 columns output, returning key information returns 9 columns. faster download results key information.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/taxsim_calculate_taxes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate state and federal taxes using TAXSIM 32. — taxsim_calculate_taxes","text":"Returns data frame following columns: id_number unique id number row corresponds id number .datafederal_taxes Total federal taxes due. Corresponds fiitax TAXSIM. state_taxes Total state taxes due; state taxes calculated. Corresponds siitax TAXSIM. fica_taxes Total FICA taxes due. includes employee company share. Corresponds fica TAXSIM. federal_marginal_rate Federal marginal tax rate taxpayer. Corresponds frate TAXSIM. state_marginal_rate State marginal tax rate taxpayer. Corresponds srate TAXSIM. fica_rate FICA rate. Corresponds ficar TAXSIM. Additional columns returned return_all_information = TRUE","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/taxsim_calculate_taxes.html","id":"required-columns","dir":"Reference","previous_headings":"","what":"Required columns","title":"Calculate state and federal taxes using TAXSIM 32. — taxsim_calculate_taxes","text":"id_number arbitrary, non-negative, whole number. number must unique. number links results TAXSIM 32 original data frame entries. tax_year Tax year ending Dec 31 (4 digits 1960 2023). State must zero year 1977 2023. filing_status Filing status tax unit. One following: \"single\" single; \"married, jointly\" married, filing jointly; \"married, separately\" married, filing separately; \"dependent child\" dependent, usually child income; \"head household\" head household filing status.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/taxsim_calculate_taxes.html","id":"optional-columns","dir":"Reference","previous_headings":"","what":"Optional columns","title":"Calculate state and federal taxes using TAXSIM 32. — taxsim_calculate_taxes","text":"state State two letter abbreviation state SOI code. state income taxes needed, either label \"State\" remove variable. State income tax information available 1977 2023. primary_age Age primary taxpayer December 31st tax year. Taxpayer age variables determine eligibility additional standard deductions, personal exemption, EITC AMT exclusion. spouse_age Age spouse December 31st tax year. num_dependents Total number dependents. num_dependents_thirteen Number children 13 eligible child care expenses (Dependent Care Credit). num_dependents_seventeen Number children 17 entire tax year (Child Credit). includes children 13. num_dependents_eitc Number qualifying children EITC. (Typically younger 19 younger 24 full-time student). primary_wages Wage salary income Primary Taxpayer (include self-employment QBI). spouse_wages Wage salary income Spouse (include self-employment QBI). Must zero column exist non-joint returns. dividends Dividend income (qualified dividends 2003 ). interest Interest income received (+/-). short_term_capital_gains Short Term Capital Gains losses (+/-). long_term_capital_gains Long Term Capital Gains losses (+/-). other_property_income property income subject NIIT, including: unearned limited partnership passive S-Corp profits; rent eligible QBI deduction; non-qualified dividends; capital gains distributions form 1040; income loss otherwise enumerated . other_non_property_income non-property income subject Medicare NIIT : alimony; nonwage fellowships; state income tax refunds (itemizers ). Also includes adjustments items : alimony paid; Keogh IRA contributions; foreign income exclusion; NOLs pensions Taxable Pensions IRA distributions. social_security Gross Social Security Benefits. unemployment Unemployment compensation received. other_transfer_income non-taxable transfer income : welfare; workers comp; veterans benefits; child support affect eligibility state property tax rebates taxable federal level. rent_paid Rent paid (used calculating state property tax rebates). property_taxes Real Estate taxes paid. preference AMT also used calculate state property tax rebates. other_itemized_deductions Itemized deductions preference Alternative Minimum Tax. include: state local taxes (line 8 Schedule ) plus local income tax; Preference share medical expenses; Miscellaneous (line 27). child_care_expenses Child care expenses. misc_deductions Deductions included other_itemized_deductions preference AMT, including (Schedule 2009). Might include: Deductible medical expenses included Line 16; Motor Vehicle Taxes paid; Home mortgage interest; Charitable contributions; Casulty Theft Losses. scorp_income Active S-Corp income (SSTB). qualified_business_income Primary Taxpayer's Qualified Business Income (QBI) subject preferential rate without phaseout assuming sufficient wages paid capital eligible full deduction. Subject SECA Medicare additional Earnings Tax. specialized_service_trade Primary Taxpayer's Specialized Service Trade Business service (SSTB) preferential rate subject claw-back. Subject SECA Medicare Additional Earnings Tax. spouse_qualified_business_income Spouse's QBI. Must zero non-joint returns, column exist. spouse_specialized_service_trade Spouse's SSTB. Must zero non-joint returns, column exist.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/taxsim_calculate_taxes.html","id":"note-on-number-of-dependents","dir":"Reference","previous_headings":"","what":"Note on number of dependents","title":"Calculate state and federal taxes using TAXSIM 32. — taxsim_calculate_taxes","text":"num_dependents columns mutually exclusive. example, family 13 year old can report dependent num_dependents_thirteen also num_dependents_seventeen.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/taxsim_calculate_taxes.html","id":"giving-credit-where-it-is-due","dir":"Reference","previous_headings":"","what":"Giving credit where it is due","title":"Calculate state and federal taxes using TAXSIM 32. — taxsim_calculate_taxes","text":"NBER's TAXSIM 35 tax simulator tax calculations. package simply lets users interact tax simulator R. Therefore, users cite TAXSIM 32 tax simulator use package work: Feenberg, Daniel Richard, Elizabeth Coutts, Introduction TAXSIM Model, Journal Policy Analysis Management vol 12 1, Winter 1993, pages 189-194.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/taxsim_calculate_taxes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate state and federal taxes using TAXSIM 32. — taxsim_calculate_taxes","text":"","code":"family_income <- data.frame(     id_number = c(1, 2),      state = c('North Carolina', 'NY'),      tax_year = c(2015, 2015),      filing_status = c('single', 'married, jointly'),      primary_wages = c(10000, 100000),      primary_age = c(26, 36) )  family_taxes <- taxsim_calculate_taxes(family_income) #> All required columns are present and the data is in the proper format! #> Connecting to TAXSIM server via ftp ... #> Data uploaded ... #> Data downloaded ... #> Upload and download successful!  merge(family_income, family_taxes, by = 'id_number') #>   id_number          state tax_year    filing_status primary_wages primary_age #> 1         1 North Carolina     2015           single         1e+04          26 #> 2         2             NY     2015 married, jointly         1e+05          36 #>   federal_taxes state_taxes fica_taxes federal_marginal_rate #> 1       -369.12      143.75       1530                  7.65 #> 2      11437.50     4761.98      15300                 25.00 #>   state_marginal_rate fica_rate #> 1                5.75        15 #> 2                6.45        15"},{"path":"https://shanejorr.github.io/usincometaxes/reference/taxsim_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Map input column names. — taxsim_cols","title":"Map input column names. — taxsim_cols","text":"Map input column names required package input column names required TAXSIM.","code":""},{"path":"https://shanejorr.github.io/usincometaxes/reference/taxsim_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map input column names. — taxsim_cols","text":"","code":"taxsim_cols()"},{"path":"https://shanejorr.github.io/usincometaxes/reference/usincometaxes.html","id":null,"dir":"Reference","previous_headings":"","what":"usincometaxes: A package for calculating state and federal income taxes in the United States. — usincometaxes","title":"usincometaxes: A package for calculating state and federal income taxes in the United States. — usincometaxes","text":"usincometaxes package single function packages calculates state federal income taxes United State. relies NBER's TAXSIM 32 tax calculator calculations. See https://users.nber.org/~taxsim/taxsim32/ information TAXSIM 32.","code":""}]
